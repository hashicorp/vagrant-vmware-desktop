on:
  push:
    branches:
      - 'build-utility-macos-*'
  workflow_call:
    outputs:
      linux-cache-id:
        description: Cache identifier for linux packages
        value: ${{ jobs.info.outputs.linux-cache-id }}
      macos-cache-id:
        description: Cache identifier for macOS packages
        value: ${{ jobs.info.outputs.macos-cache-id }}
      windows-cache-id:
        description: Cache identifier for Windows packages
        value: ${{ jobs.info.outputs.windows-cache-id }}
      utility-version:
        description: Version of the VMware utility
        value: ${{ jobs.info.outputs.utility-version }}

jobs:
  info:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    name: Generate Information
    runs-on: ubuntu-latest
    permissions: # These need to be write for access to draft releases
      contents: write
    outputs:
      utility-version: ${{ steps.inspect.outputs.utility-version }}
      unsigned-cache-id: ${{ steps.inspect.outputs.unsigned-cache-id }}
      unsigned-cache-exists: ${{ steps.inspect.outputs.unsigned-cache-exists }}
      signed-cache-id: ${{ steps.inspect.outputs.signed-cache-id }}
      signed-cache-exists: ${{ steps.inspect.outputs.signed-cache-exists }}
      linux-cache-id: ${{ steps.inspect.outputs.linux-cache-id }}
      linux-cache-exists: ${{ steps.inspect.outputs.linux-cache-exists }}
      macos-cache-id: ${{ steps.inspect.outputs.macos-cache-id }}
      macos-cache-exists: ${{ steps.inspect.outputs.macos-cache-exists }}
      windows-cache-id: ${{ steps.inspect.outputs.windows-cache-id }}
      windows-cache-exists: ${{ steps.inspect.outputs.windows-cache-exists }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Gather information
        id: inspect
        run: ./.ci/utility-information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.signed-cache-exists != 'true'
    name: Build VMware Utilities
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    needs: [info]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_id;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_secret;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_macos_binary_signer;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_windows_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        if: needs.info.outputs.unsigned-cache-exists != 'true'
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Build utility binaries
        if: needs.info.outputs.unsigned-cache-exists != 'true'
        run: make all
      - name: Cache binaries
        if: needs.info.outputs.unsigned-cache-exists != 'true'
        run: ./.ci/create-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.unsigned-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Restore cached binaries
        if: needs.info.outputs.unsigned-cache-exists == 'true'
        run: ./.ci/restore-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.unsigned-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Sign macOS binary
        run: . .ci/load-ci.sh && sign_file -b "vagrant-vmware-utility" "./bin/vagrant-vmware-utility_darwin_universal"
        env:
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_macos_binary_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
      - name: Sign Windows binary
        run: ./.ci/sign-file "./bin/vagrant-vmware-utility.exe"
        env:
          SIGNORE_WINDOWS: ${{ steps.secrets.outputs.signore_windows_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Cache signed binaries
        run: ./.ci/create-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.signed-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  windows-binary:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.windows-cache-exists != 'true' && !failure() && !cancelled()
    name: Store Windows binary
    runs-on: ubuntu-latest
    needs: [info, build]
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch binaries
        run: ./.ci/restore-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.signed-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload for Windows
        uses: actions/upload-artifact@v3
        with:
          name: windows-binary
          path: ./bin
  build-linux:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.linux-cache-exists != 'true' && !failure() && !cancelled()
    name: Build Linux RPM, DEB, and PACMAN packages
    runs-on: ubuntu-latest
    needs: [info, build]
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch binaries
        run: ./.ci/restore-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.signed-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true
      - name: Build DEB
        run: ./.ci/build-deb
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Build RPM
        run: ./.ci/build-rpm
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Build PACMAN
        run: ./.ci/build-pacman
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Cache packages
        run: ./.ci/create-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.info.outputs.linux-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-macos-corepkg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.macos-cache-exists != 'true'  && !failure() && !cancelled()
    name: Build macOS package
    runs-on: macos-latest
    needs: [info, build]
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Upgrade bash
        run: brew install bash
      - name: Fetch binaries
        run: ./.ci/restore-cache "${CACHE_ID}" ./bin
        env:
          CACHE_ID: ${{ needs.info.outputs.signed-cache-id }}
      - name: Build core package
        id: build-core
        run: ./.ci/build-macos-core-pkg ./bin/vagrant-vmware-utility_darwin_universal
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Relocate for upload
        run: mkdir ./corepkg && mv "${CORE_PKG}" ./corepkg
        env:
          CORE_PKG: ${{ steps.build-core.outputs.core-path }}
      - name: Upload core package
        uses: actions/upload-artifact@v3
        with:
          name: corepkg-unsigned
          path: ./corepkg
  sign-macos-corepkg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    needs: [build-macos-corepkg]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_id;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_secret;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_macos_installer_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Download unsigned core package
        uses: actions/download-artifact@v3
        with:
          name: corepkg-unsigned
          path: ./corepkg
      - name: Sign core package
        run: . .ci/load-ci.sh && sign_file ./corepkg/*
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_macos_installer_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Upload signed core package
        uses: actions/upload-artifact@v3
        with:
          name: corepkg-signed
          path: ./corepkg
  build-macos-fullpkg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    name: Build macOS package
    runs-on: macos-latest
    needs: [info, sign-macos-corepkg]
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Upgrade bash
        run: brew install bash
      - name: Download signed core package
        uses: actions/download-artifact@v3
        with:
          name: corepkg-signed
          path: ./corepkg
      - name: Build full package
        id: build-full
        run: ./.ci/build-macos-full-pkg ./corepkg/*
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Relocate for upload
        run: mkdir ./fullpkg && mv "${FULL_PKG}" ./fullpkg
        env:
          FULL_PKG: ${{ steps.build-full.outputs.full-path }}
      - name: Upload full package
        uses: actions/upload-artifact@v3
        with:
          name: fullpkg-unsigned
          path: ./fullpkg
  sign-macos-fullpkg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    needs: [build-macos-corepkg]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_id;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_secret;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_macos_installer_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Download unsigned full package
        uses: actions/download-artifact@v3
        with:
          name: fullpkg-unsigned
          path: ./fullpkg
      - name: Sign full package
        run: . .ci/load-ci.sh && sign_file ./fullpkg/*
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_macos_installer_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Upload signed full package
        uses: actions/upload-artifact@v3
        with:
          name: fullpkg-signed
          path: ./fullpkg
  build-macos-dmg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    name: Build macOS package
    runs-on: macos-latest
    needs: [info, sign-macos-fullpkg]
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Upgrade bash
        run: brew install bash
      - name: Download signed full package
        uses: actions/download-artifact@v3
        with:
          name: fullpkg-signed
          path: ./fullpkg
      - name: Build DMG
        id: build-dmg
        run: ./.ci/build-macos-dmg ./fullpkg/*
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Relocate for upload
        run: mkdir ./dmg && mv "${DMG}" ./dmg
        env:
          DMG: ${{ steps.build-dmg.outputs.dmg-path }}
      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          name: dmg-unsigned
          path: ./dmg
  sign-and-notarize-macos-dmg:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder'
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    needs: [build-macos-dmg]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder notarization_key;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_id;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_secret;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_macos_binary_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Download unsigned DMG
        uses: actions/download-artifact@v3
        with:
          name: dmg-unsigned
          path: ./dmg
      - name: Sign DMG
        run: . .ci/load-ci.sh && sign_file ./dmg/*
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_macos_binary_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Notarize DMG
        run: ./.ci/notarize-file ./dmg/*.dmg
        env:
          NOTARIZE_KEY: ${{ steps.secrets.outputs.notarization_key }}
      - name: Store DMG
        run: ./.ci/create-cache "${CACHE_ID}" ./dmg
        env:
          CACHE_ID: ${{ needs.info.outputs.macos-cache-id }}
  build-windows:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.windows-cache-exists != 'true'
    name: Build Windows package
    runs-on: windows-latest
    needs: [info, windows-binary]
    permissions:
      contents: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch utility binary
        uses: actions/download-artifact@v3
        with:
          name: windows-binary
          path: ./bin
      - name: Build package
        run: powershell.exe -File ./.ci/build-msi.ps1 -UtilityPath ./bin/vagrant-vmware-utility.exe -UtilityVersion ${env:UTILITY_VERSION}
        env:
          UTILITY_VERSION: ${{ needs.info.outputs.utility-version }}
      - name: Upload unsigned artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-unsigned-msi
          path: ./pkg
  sign-windows:
    if: github.repository == 'hashicorp/vagrant-vmware-desktop-builder' && needs.info.outputs.windows-cache-exists != 'true'
    name: Sign Windows MSI
    needs: [info, build-windows]
    runs-on: ['self-hosted', 'ondemand', 'linux', 'type=t3.small']
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Authentication
        id: vault-auth
        run: vault-auth
      - name: Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets:
            kv/data/teams/vagrant/hashibot signore_token;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_id;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_client_secret;
            kv/data/github/hashicorp/vagrant-vmware-desktop-builder signore_windows_signer;
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Fetch MSI
        uses: actions/download-artifact@v3
        with:
          name: windows-unsigned-msi
          path: ./pkg
      - name: Setup Signore
        run: ./.ci/install-signore
        env:
          HASHIBOT_TOKEN: ${{ steps.secrets.outputs.signore_token }}
      - name: Sign MSI
        run: msi=( ./pkg/* ) && ./.ci/sign-file "${msi[0]}"
        env:
          SIGNORE_SIGNER: ${{ steps.secrets.outputs.signore_windows_signer }}
          SIGNORE_CLIENT_ID: ${{ steps.secrets.outputs.signore_client_id  }}
          SIGNORE_CLIENT_SECRET: ${{ steps.secrets.outputs.signore_client_secret }}
      - name: Cache packages
        run: ./.ci/create-cache "${CACHE_ID}" ./pkg
        env:
          CACHE_ID: ${{ needs.info.outputs.windows-cache-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
