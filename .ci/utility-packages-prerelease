#!/usr/bin/env bash

# Output to stdout if we aren't on a runner
if [ -z "${GITHUB_OUTPUT}" ]; then
    GITHUB_OUTPUT="/dev/stdout"
fi

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../" && pwd )"

. "${root}/.ci/load-ci.sh"
pushd "${root}"

release_name="${1}"
if [ -z "${release_name}" ]; then
    failure "Name is required for utility packages release"
fi
release_dir="${2}"
if [ -z "${release_dir}" ]; then
    failure "Artifact directory is required for utility packages release"
fi

info "Publishing utility packages prerelease..."

debug "checking event name to determine if nightly release (%s)" "${EVENT_NAME}"
if [ "${EVENT_NAME}" = "schedule" ]; then
    body="Vagrant VMware Utility packages nightly build"
    target_repo="vagrant-vmware-desktop"
else
    target_repo="${repo_name}"
    body="Vagrant VMware Utility packages custom build (branch: ${ident_ref})"
fi

release_output="$(github_create_release -o "${repo_owner}" -r "${target_repo}" -n "${release_name}" -t "${release_name}" -c "${full_sha}" -b "${body}" -p -m)" ||
    failure "Could not create GitHub prerelease"
debug "new release created: %s" "${release_output}"
release_id="$(printf "%s" "${release_output}" | jq -r '.id')" ||
    failure "Could not get release ID from release creation response"

# Upload release artifacts
debug "uploading artifacts for vagrant vmware utility packages release '%s' (ID: %d)" "${release_name}" "${release_id}"
github_upload_release_artifacts "${target_repo}" "${release_id}" "${release_dir}"
