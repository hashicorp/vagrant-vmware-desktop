#!/usr/bin/env bash

# Output to stdout if we aren't on a runner
if [ -z "${GITHUB_OUTPUT}" ]; then
    GITHUB_OUTPUT="/dev/stdout"
fi

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/../" && pwd )"

. "${root}/.ci/load-ci.sh"
pushd "${root}"

version="$(<go_src/vagrant-vmware-utility/version/version.go)"
version="${version##*VERSION = \"}"
version="${version%%\"*}"
util_id="$(git log --format=%h -1 ./go_src)" ||
    failure "Could not generate commit sha for ./go_src"

unsigned_id="utility-${util_id}-unsigned"
signed_id="utility-${util_id}-signed"
linux_id="utility-${util_id}-linux"
macos_id="utility-${util_id}-macos"
windows_id="utility-${util_id}-windows"

# Create information outputs for cache identifiers and
# if the cache currently exists

# Define the utility version
debug "utility-version=%s" "${version}"
printf "utility-version=%s\n" "${version}" >> "${GITHUB_OUTPUT}"

# Set unsigned cache identifer and check existence
debug "unsigned-cache-id=%s" "${unsigned_id}"
printf "unsigned-cache-id=%s\n" "${unsigned_id}" >> "${GITHUB_OUTPUT}"
if github_draft_release_exists "${repo_name}" "${unsigned_id}"; then
    debug "unsigned-cache-exists=true"
    printf "unsigned-cache-exists=true\n" >> "${GITHUB_OUTPUT}"
fi

# Set signed cache identifer and check existence
debug "signed-cache-id=%s" "${signed_id}"
printf "signed-cache-id=%s\n" "${signed_id}" >> "${GITHUB_OUTPUT}"
if github_draft_release_exists "${repo_name}" "${signed_id}"; then
    debug "signed-cache-exists=true"
    printf "signed-cache-exists=true\n" >> "${GITHUB_OUTPUT}"
fi

# Set linux cache identifer and check existence
debug "linux-cache-id=%s" "${linux_id}"
printf "linux-cache-id=%s\n" "${linux_id}" >> "${GITHUB_OUTPUT}"
if github_draft_release_exists "${repo_name}" "${linux_id}"; then
    debug "linux-cache-exists=true"
    printf "linux-cache-exists=true\n" >> "${GITHUB_OUTPUT}"
fi

# Set macos cache identifer and check existence
debug "macos-cache-id=%s" "${macos_id}"
printf "macos-cache-id=%s\n" "${macos_id}" >> "${GITHUB_OUTPUT}"
if github_draft_release_exists "${repo_name}" "${macos_id}"; then
    debug "macos-cache-exists=true"
    printf "macos-cache-exists=true\n" >> "${GITHUB_OUTPUT}"
fi

# Set windows cache identifer and check existence
debug "windows-cache-id=%s" "${windows_id}"
printf "windows-cache-id=%s\n" "${windows_id}" >> "${GITHUB_OUTPUT}"
if github_draft_release_exists "${repo_name}" "${windows_id}"; then
    debug "windows-cache-exists=true"
    printf "windows-cache-exists=true\n" >> "${GITHUB_OUTPUT}"
fi
