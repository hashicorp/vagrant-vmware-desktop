#!/usr/bin/env bash

# Setup some constants
NOTARIZE_PREFIX="üçé"
PACKAGE_PREFIX="üì¶"
BANG_PREFIX="‚ùóÔ∏è"
LOGS_PREFIX="üå≤"
WAITING_PREFIX="üïì"
DEBUG_PREFIX="üêû"
VALIDATE_PREFIX="üîé"

# Text formatting
BOLD='\e[1m'
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
CLEAR='\e[0m'

# Interval for wait on recheck
NOTARIZATION_WAIT_INTERVAL=30

# Setup our defaults
NOTARIZE_USERNAME="${AC_USERNAME}"
NOTARIZE_PASSWORD="${AC_PASSWORD}"
NOTARIZATION_STAPLE=""
NOTARIZATION_WAIT=""

DEBUG_TARGET="/dev/null"

function print_help() {
    bin=$(basename "${0}")
    echo "Usage: ${bin} COMMAND [OPTS] [ARGS]"
    echo
    echo "Description:"
    echo "  This tool provides a simple interface to the Apple notarization"
    echo "  process. It includes various subcommands which can be used for:"
    echo "  notarization, verification, and log inspection."
    echo
    echo "Commands:"
    echo -e "\tinfo REQUEST_UUID [ATTR]\tFetch notarization information"
    echo -e "\tlog REQUEST_UUID\t\tFetch notarization log"
    echo -e "\tnotarize BUNDLE_ID PATH\t\tSubmit PATH for notarization"
    echo -e "\t  -s\tWait and staple"
    echo -e "\tstaple PATH\t\t\tStaple PATH (notarization must be complete)"
    echo -e "\tvalidate UUID\t\t\tValidate notarization was successful"
    echo -e "\twait UUID\t\t\tWait for notarization request to complete"
    echo
    echo "Global Options:"
    echo -e "\t-d\t\tEnable debug output"
    echo -e "\t-p PASSWORD\tApple ID password (default: AC_PASSWORD)"
    echo -e "\t-u USERNAME\tApple ID username (default: AC_USERNAME)"
}

# Write a debug message
function debug() {
    local location="${1}"
    local msg="${2}"
    if [ -z "${msg}" ]; then
        msg="${location}"
        location="main"
    else
        location="fn:${location}"
    fi

    if [ -n "${DEBUG}" ] && [ -n "${msg}" ]; then
        printf "%s %b%b<%s>%b %s\n" "${DEBUG_PREFIX}" "${BOLD}" "${YELLOW}" \
            "${location}" "${CLEAR}" "${msg}" > "${DEBUG_TARGET}"
    fi
}

# Write a message
function print() {
    local msg="${1}"
    if [ -n "${msg}" ]; then
        printf "%b\n" "${msg}" >&2
    fi
}

# Write a message without a newline appended (to stderr)
function write() {
    local msg="${1}"
    if [ -n "${msg}" ]; then
        printf "%b" "${msg}" >&2
    fi
}

# Write an error message and exit
function error() {
    local msg="${1:-Unknown error}"
    printf "%s %b%b%s%b\n" "${BANG_PREFIX}" "${BOLD}" "${RED}" "${msg}" "${CLEAR}" >&2
    exit 1
}

# Consume an error message and pass it to error function
function display_error() {
    msg="${1}"
    if [[ "${msg}" = *"*** Error:"* ]]; then
        error "${msg#*Error: }"
    else
        error "${msg##*$'\n'}"
    fi
}

# Validate path given exists
function validate_path() {
    local path="${1}"
    if [ -z "${path}" ]; then
        error "PATH was not provided for notarization"
    fi
    if [ ! -f "${path}" ]; then
        error "PATH value does not reference a valid path (${path})"
    fi
}

# Write failure notification
function failure() {
    printf "%b%bfailed%b\n" "${BOLD}" "${RED}" "${CLEAR}" >&2
}

# Write success notification
function success() {
    printf "%b%bsuccess%b\n" "${BOLD}" "${GREEN}" "${CLEAR}" >&2
}

# Notarize artifact at given path
#
# $1: Bundle ID for artifact
# $2: Path to artifact
function notarize() {
    debug "notarize" "start: ${*}"
    local bundle_id="${1}"
    local path="${2}"
    if [ -z "${bundle_id}" ]; then
        error "BUNDLE_ID is missing for notarization"
    fi
    validate_path "${path}"

    write "${BOLD}${NOTARIZE_PREFIX}${CLEAR} Sending notarization request for ${path}... "
    local output
    debug "notarize" "sending notarization request"
    if ! output="$(xcrun altool --notarize-app \
        --username "${NOTARIZE_USERNAME}" \
        --password "${NOTARIZE_PASSWORD}" \
        --primary-bundle-id "${bundle_id}" \
        --file "${path}" 2> "${DEBUG_TARGET}")"; then

        failure
        display_error "${output}"
    fi
    success
    uuid="${output#*RequestUUID = }"
    printf "%s" "${uuid}"
}

# Get information about a notarization request
#
# $1: UUID of notarization request
# $2: Set to prevent output generation
function info() {
    debug "info" "start: ${*}"
    local uuid="${1}"
    local quiet="${2}"

    if [ -z "${uuid}" ]; then
        error "REQUEST_UUID is missing for notarization request lookup"
    fi

    if [ -z "${quiet}" ]; then
        write "${BOLD}${NOTARIZE}${CLEAR} Looking up notarization request information on ${uuid}... "
    fi

    local output
    debug "info" "fetching notarization request information"
    if ! output="$(xcrun altool --notarization-info "${uuid}" \
        --username "${NOTARIZATION_USERNAME}" \
        --password "${NOTARIZATION_PASSWORD}" 2> "${DEBUG_TARGET}")"; then

        failure
        display_error "${output}"
    fi
    if [ -z "${quiet}" ]; then
        success
    fi
    debug "info" "notarization information request complete"
    printf "%s" "${output}"
}

# Staple a notarization to artifact
#
# $1: Path to artifact
function staple() {
    debug "staple" "start: ${*}"
    local path="${1}"
    validate_path "${path}"

    write "${BOLD}${PACKAGE_PREFIX}${CLEAR} Stapling notarization to ${path}... "

    local output
    debug "staple" "stapling notarization to asset"
    if ! output="$(xcrun stapler staple "${path}" 2> "${DEBUG_TARGET}")"; then
        failure
        display_error "${output}"
    fi
    success
}

# Extract value for given key from provided content
#
# $1: key value
# $2: content to search
function get_info() {
    debug "get_info" "start: ${*}"
    local key="${1?"Key name required"}"
    local content="${2?"Content to search required"}"

    debug "get_info" "key: ${key}"
    debug "get_info" "content: ${content}"
    # shellcheck disable=SC2295
    local part="${content#*${key}: }"
    local val="${part%%$'\n'*}"
    debug "get_info" "value: ${val}"
    printf "%s" "${val}"
}

# Fetch the notarization log for a request
#
# $1: Notarization request information (returned by `info`)
function show_log() {
    debug "show_log" "start: ${*}"
    local notarization_info="${1}"
    if [ -z "${notarization_info}" ]; then
        error "No notarization information provided for log file lookup"
    fi
    debug "show_log" "${notarization_info}"
    local url
    url="$(get_info "LogFileURL" "${notarization_info}")" || return
    debug "show_log" "discovered url: ${url}"
    if [ -n "${url}" ]; then
        print "${BOLD}${LOGS_PREFIX}${CLEAR} Fetching notarization log... "
        if ! curl -SsL --fail "${url}"; then
            error "Failed to retrieve notarization log"
        fi
        return 0
    fi
    return 1
}

# Waits for the given notarization request to reach
# a completed state
#
# $1: UUID of notarization request
function wait_for_notarization() {
    debug "wait_for_notarization" "start: ${*}"
    local uuid="${1}"
    if [ -z "${uuid}" ]; then
        error "UUID of notarization request is required for wait"
    fi

    debug "wait_for_notarization" "uuid: ${uuid}"

    local finished
    write "${BOLD}${WAITING_PREFIX}${CLEAR} Waiting for notarization to complete ${uuid}... "
    while [ -z "${finished}" ]; do
        output="$(info "${uuid}" quiet)"
        status="$(get_info "Status" "${output}")"
        debug "wait_for_notarization" "current status: ${status}"
        if [ -n "${status}" ] && [ "${status}" != "in progress" ]; then
            finished=1
        else
            debug "wait_for_notarization" "sleeping for ${NOTARIZATION_WAIT_INTERVAL}"
            sleep "${NOTARIZATION_WAIT_INTERVAL}"
        fi
        success
    done
}

# Validate a notarization request is successfully completed
#
# $1: UUID of notarization request
function validate() {
    debug "validate" "${*}"
    local uuid="${1}"
    if [ -z "${uuid}" ]; then
        error "UUID of notarization request is required for validation"
    fi

    debug "validate" "uuid: ${uuid}"
    write "${BOLD}${VALIDATE_PREFIX}${CLEAR} Validating notarization of ${uuid}... "
    output="$(info "${uuid}" quiet)"
    status="$(get_info "Status" "${output}")"
    debug "validate" "status: ${status}"
    if [ "${status}" = "success" ]; then
        success
    else
        failure
        exit 1
    fi
}

while getopts "u:p:sdh" opt; do
    case "${opt}" in
        u)
            NOTARIZATION_USERNAME="${OPTARG}"
            ;;
        p)
            NOTARIZATION_PASSWORD="${OPTARG}"
            ;;
        s)
            NOTARIZATION_STAPLE="1"
            NOTARIZATION_WAIT="1"
            ;;
        d)
            DEBUG_TARGET="/dev/stderr"
            DEBUG="1"
            ;;
        h)
            print_help
            exit 0
            ;;
        *)
            print_help
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))
[ "${1:-}" = "--" ] && shift

command="${1}"

case "${command}" in
    notarize)
        debug "running notarize command"
        bundle_id="${2}"
        path="${3}"
        uuid="$(notarize "${bundle_id}" "${path}")" || exit
        if [ -z "${NOTARIZATION_WAIT}" ]; then
            printf "Notarization request UUID: " >&2
            printf "%s\n" "${uuid}"
            exit
        fi
        debug "wait for notarization completion requested"
        wait_for_notarization "${uuid}" || exit
        debug "validating notarization was successful"
        validate "${uuid}" || exit
        if [ -n "${NOTARIZATION_STAPLE}" ]; then
            debug "staple of notarization requested"
            staple "${path}" || exit
        fi
        ;;
    info)
        debug "running info command"
        uuid="${2}"
        key="${3}"
        output="$(info "${uuid}")" || exit
        if [ -z "${key}" ]; then
            puts "${output}"
        else
            puts "$(get_info "${key}" "${output}")"
        fi
        ;;
    staple)
        debug "running path command"
        path="${2}"
        staple "${path}" || exit
        ;;
    wait)
        debug "running wait command"
        uuid="${2}"
        wait_for_notarization "${uuid}" || exit
        validate "${uuid}" || exit
        ;;
    log)
        debug "running log command"
        uuid="${2}"
        output=$(info "${uuid}") || exit
        show_log "${output}"
        ;;
    validate)
        debug "running validate command"
        uuid="${2}"
        validate "${uuid}" || exit
        ;;
    *)
        debug "running help command"
        print_help
esac
